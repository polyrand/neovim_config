" Plug 'Townk/vim-autoclose'
" " snippets
" Plug 'SirVer/ultisnips'
" Plug 'ncm2/ncm2-ultisnips'
" Plug 'honza/vim-snippets'
" Plug 'ncm2/ncm2'
" Plug 'roxma/nvim-yarp'
" Plug 'ncm2/ncm2-bufword'
" Plug 'ncm2/ncm2-path'
" Plug 'ncm2/ncm2-jedi'
" Plug 'davidhalter/jedi-vim'
" Formater
" Plug 'Chiel92/vim-autoformat'
" markdown
" tabular plugin is used to format tables
" Plug 'godlygeek/tabular'
" " JSON front matter highlight plugin
" Plug 'elzr/vim-json'
" REPL
" Plug 'Vigemus/iron.nvim'
" Plug 'wsdjeg/FlyGrep.vim' " grep with <leader>s
" Plug 'autozimu/LanguageClient-neovim', {
"     \ 'branch': 'next',
"     \ 'do': 'bash install.sh',
"     \ }
" (Optional) Multi-entry selection UI.
" Plug 'junegunn/fzf'
" Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
" Plug 'ncm2/ncm2-tmux'
" Plug 'zchee/deoplete-jedi', { 'for': 'python' }
" PEP8 pyflakes
" Plug 'nvie/vim-flake8'
" Plug 'ctrlpvim/ctrlp.vim'
" Plug 'zchee/deoplete-jedi', { 'do': ':UpdateRemotePlugins', 'for': 'python'}
" Plug 'Shougo/denite.nvim'


""" NCM2 remaps

""" vim-autoformat
""noremap <F3> :Autoformat<CR>

""" Greping and finding

""" use ` + s to grep code
""" nnoremap <leader>s :FlyGrep<cr>
"""
""" snippets
""" " Press enter key to trigger snippet expansion
""" The parameters are the same as `:help feedkeys()`
""inoremap <silent> <expr> <CR> ncm2_ultisnips#expand_or("\<CR>", 'n')

""" c-j c-k for moving in snippet
""let g:UltiSnipsExpandTrigger		= "<Plug>(ultisnips_expand)"
""let g:UltiSnipsJumpForwardTrigger	= "<c-n>"
""let g:UltiSnipsJumpBackwardTrigger	= "<c-p>"
""let g:UltiSnipsRemoveSelectModeMappings = 0


""" ale
" Plug 'dense-analysis/ale'

" let g:ale_python_flake8_executable = '/Users/r/.virtualenvs/nvim/bin/flake8'
" let g:ale_python_flake8_options = ''
" let g:ale_python_flake8_use_global = 0
" let g:ale_python_pycodestyle_executable = '/Users/r/.virtualenvs/nvim/bin/pycodestyle'
" let g:ale_python_pydocstyle_executable = '/Users/r/.virtualenvs/nvim/bin/pydocstyle'
" let g:ale_python_mypy_executable = '/Users/r/.virtualenvs/nvim/bin/mypy'
" let g:ale_python_mypy_ignore_invalid_syntax = 0
" let g:ale_python_mypy_options = ''
" let g:ale_python_mypy_use_global = 0
" let g:ale_python_pylint_executable = 'pylint'
" let g:ale_python_pylint_options = ''
" let g:ale_python_pylint_use_global = 0

" let g:ale_python_autopep8_executable = '/Users/r/.virtualenvs/nvim/bin/autopep8'


" Ale
" let g:ale_lint_on_enter = 0
" let g:ale_lint_on_text_changed = 'never'
" let g:ale_echo_msg_error_str = 'E'
" let g:ale_echo_msg_warning_str = 'W'
" let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
" let g:ale_linters = {'python': ['flake8', 'mypy', 'pylint', 'pycodestyle', 'pydocstyle']}
" 
" 
" let g:ale_fixers = {
" \   '*': ['remove_trailing_lines', 'trim_whitespace'],
" \   'python': ['black']
" \}
" 
" " Set this variable to 1 to fix files when you save them.
" let g:ale_fix_on_save = 1


" Plug 'tmhedberg/simpylfold'
" Plug 'Glench/Vim-Jinja2-Syntax'


    "python",
  "python.formatting.provider": "black",
  "python.setLinter": "flake8",

    "python.jediEnabled": false,
        "python.condaPath": "/Users/r/miniconda3/condabin/conda",
    "suggest.noselect": false,
    "python.venvFolders": [
        ".venv",
        "envs",
        ".pyenv",
        ".direnv"
    ],


" this is not working
" nnoremap <A-S>1 1gt
" nnoremap <A-S>2 2gt
" nnoremap <A-S>3 3gt
" nnoremap <A-S>4 4gt
" nnoremap <A-S>5 5gt
" nnoremap <A-S>6 6gt
" nnoremap <A-S>7 7gt
" nnoremap <A-S>8 8gt
" nnoremap <A-S>9 9gt
" nnoremap <A-S>0 10gt
" nnoremap <C-S-tab> :tabprevious<CR>
" nnoremap <C-tab>   :tabnext<CR>
" inoremap <C-S-tab> <Esc>:tabprevious<CR>i
" inoremap <C-tab>   <Esc>:tabnext<CR>i
" inoremap <C-t>     <Esc>:tabnew<CR>
" " Files + devicons
" function! Fzf_dev()
"   let l:fzf_files_options = '--preview "bat --theme="OneHalfDark" --style=numbers,changes --color always {2..-1} | head -'.&lines.'"'

"   function! s:files()
"     let l:files = split(system($FZF_DEFAULT_COMMAND), '\n')
"     return s:(l:files)
"   endfunction

"   function! s:edit_file(item)
"     let l:pos = stridx(a:item, ' ')
"     let l:file_path = a:item[pos+1:-1]
"     execute 'silent e' l:file_path
"   endfunction

"   call fzf#run({
"         \ 'source': <sid>files(),
"         \ 'sink':   function('s:edit_file'),
"         \ 'options': '-m ' . l:fzf_files_options,
"         \ 'down':    '40%' })
" endfunction



" source: https://www.reddit.com/r/vim/comments/gx8gi/fold_python_docstrings_automagically/:
highlight Folded NONE
highlight link Folded pythonString

" let's fold docstrings
syn region pythonString start=+[uU]\=\z('''\|"""\)+ end="\z1" keepend contains=pythonEscape,pythonSpaceError,pythonDoctest,@Spell fold
function! DocstringFold()
    let first_line = getline(v:foldstart)
    let second_line = getline(v:foldstart + 1)

    " if the first line is empty...
    if first_line =~ '^\s*\"\"\"\s*$'
        let doc_txt = substitute(second_line, '^\s*', '', 'g')
    else
        let doc_txt = substitute(first_line, '^\s*\"\"\"\s*', '', 'g')
    endif

    let indent_len = indent(v:foldstart)
    let folded_lines = v:foldend-v:foldstart
    let indent = repeat(' ', indent_len)
    let prefix = '#.. '
    let end_filler = ' (+'. folded_lines . ')  '
    let offset = 4
    let max_len = winwidth(0) - (indent_len + len(prefix) + len(end_filler) + offset)
    let text =  doc_txt[:max_len]
    let filler = repeat(' ', winwidth(0) - indent_len - len(prefix) - len(end_filler) - len(text) - offset + 1)
    return indent . prefix . text . filler . end_filler
endfunction
setlocal foldtext=DocstringFold()

" autocommand python call
